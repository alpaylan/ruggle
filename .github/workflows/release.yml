name: release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and release ruggle-server
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_ext: ''
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_ext: ''
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_ext: '.exe'
            archive: zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build ruggle-server
        run: |
          cargo build --release -p ruggle-server

      - name: Prepare package
        shell: bash
        run: |
          set -euxo pipefail
          PKG_DIR=dist/${{ matrix.target }}
          mkdir -p "$PKG_DIR/index/crate"
          # Copy server binary
          BIN_NAME=ruggle-server${{ matrix.bin_ext }}
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp target/release/ruggle-server.exe "$PKG_DIR/$BIN_NAME"
          else
            cp target/release/ruggle-server "$PKG_DIR/$BIN_NAME"
            chmod +x "$PKG_DIR/$BIN_NAME"
          fi
          # Bundle minimal index (std/core/alloc) if present
          for CRATE in std core alloc; do
            if [ -f ruggle-index/crate/${CRATE}.json ]; then
              cp ruggle-index/crate/${CRATE}.json "$PKG_DIR/index/crate/" || true
            fi
          done
          # Create plain binary asset (for VSCode managed mode direct download)
          mkdir -p upload
          cp "$PKG_DIR/$BIN_NAME" upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }}
          # Archive the full package
          if [ "${{ matrix.archive }}" = "tar.gz" ]; then
            tar -C dist -czf upload/ruggle-server-${{ matrix.target }}.tar.gz "${{ matrix.target }}"
            shasum -a 256 upload/ruggle-server-${{ matrix.target }}.tar.gz > upload/ruggle-server-${{ matrix.target }}.tar.gz.sha256 || sha256sum upload/ruggle-server-${{ matrix.target }}.tar.gz > upload/ruggle-server-${{ matrix.target }}.tar.gz.sha256
          else
            (cd dist && powershell -c "Compress-Archive -Path '${{ matrix.target }}/*' -DestinationPath '../upload/ruggle-server-${{ matrix.target }}.zip' ")
            certutil -hashfile upload/ruggle-server-${{ matrix.target }}.zip SHA256 > upload/ruggle-server-${{ matrix.target }}.zip.sha256 || true
          fi
          # Checksums for plain binary
          if [ -f upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }} ]; then
            if [ "${{ runner.os }}" = "Windows" ]; then
              certutil -hashfile upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }} SHA256 > upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }}.sha256 || true
            else
              shasum -a 256 upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }} > upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }}.sha256 || sha256sum upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }} > upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }}.sha256
            fi
          fi

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }}
            upload/ruggle-server-${{ matrix.target }}${{ matrix.bin_ext }}.sha256
            upload/ruggle-server-${{ matrix.target }}.tar.gz
            upload/ruggle-server-${{ matrix.target }}.tar.gz.sha256
            upload/ruggle-server-${{ matrix.target }}.zip
            upload/ruggle-server-${{ matrix.target }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


